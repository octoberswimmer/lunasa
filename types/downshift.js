/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module "downshift" {
	declare type Callback = () => void
	declare export interface DownshiftState<Item> {
		highlightedIndex: number | null;
		inputValue: string | null;
		isOpen: boolean;
		selectedItem: Item | null;
	}
	declare type StateChangeTypes = {
		unknown: "__autocomplete_unknown__",
		mouseUp: "__autocomplete_mouseup__",
		itemMouseEnter: "__autocomplete_item_mouseenter__",
		keyDownArrowUp: "__autocomplete_keydown_arrow_up__",
		keyDownArrowDown: "__autocomplete_keydown_arrow_down__",
		keyDownEscape: "__autocomplete_keydown_escape__",
		keyDownEnter: "__autocomplete_keydown_enter__",
		clickItem: "__autocomplete_click_item__",
		blurInput: "__autocomplete_blur_input__",
		changeInput: "__autocomplete_change_input__",
		keyDownSpaceButton: "__autocomplete_keydown_space_button__",
		clickButton: "__autocomplete_click_button__",
		blurButton: "__autocomplete_blur_button__",
		controlledPropUpdatedSelectedItem: "__autocomplete_controlled_prop_updated_selected_item__"
	}
	declare export interface DownshiftProps<Item> {
		defaultSelectedItem?: Item;
		defaultHighlightedIndex?: number | null;
		defaultInputValue?: string;
		defaultIsOpen?: boolean;
		itemToString?: (item: Item) => string;
		selectedItemChanged?: (prevItem: Item, item: Item) => boolean;
		getA11yStatusMessage?: (options: A11yStatusMessageOptions<Item>) => string;
		onChange?: (
			selectedItem: Item,
			stateAndHelpers: ControllerStateAndHelpers<Item>
		) => void;
		onSelect?: (
			selectedItem: Item,
			stateAndHelpers: ControllerStateAndHelpers<Item>
		) => void;
		onStateChange?: (
			options: StateChangeOptions<Item>,
			stateAndHelpers: ControllerStateAndHelpers<Item>
		) => void;
		onInputValueChange?: (
			inputValue: string,
			stateAndHelpers: ControllerStateAndHelpers<Item>
		) => void;
		stateReducer?: (
			state: DownshiftState<Item>,
			changes: StateChangeOptions<Item>
		) => $Shape<StateChangeOptions<Item>>;
		itemCount?: number;
		highlightedIndex?: number | null;
		inputValue?: string | null;
		isOpen?: boolean;
		selectedItem?: Item | null;
		children?: ChildrenFunction<Item>;
		id?: string;
		environment?: Environment;
		onOuterClick?: (stateAndHelpers: ControllerStateAndHelpers<Item>) => void;
		onUserAction?: (
			options: StateChangeOptions<Item>,
			stateAndHelpers: ControllerStateAndHelpers<Item>
		) => void;
	}
	declare export interface Environment {
		addEventListener: typeof undefined;
		removeEventListener: typeof undefined;
		document: Document;
	}
	declare export interface A11yStatusMessageOptions<Item> {
		highlightedIndex: number | null;
		inputValue: string;
		isOpen: boolean;
		itemToString: (item: Item) => string;
		previousResultCount: number;
		resultCount: number;
		selectedItem: Item;
	}
	declare export type StateChangeOptions<Item> = {
		type: $Values<StateChangeTypes>
	} & $Shape<DownshiftState<Item>>
	declare type StateChangeFunction<Item> = (
		state: DownshiftState<Item>
	) => $Shape<StateChangeOptions<Item>>
	declare export interface GetRootPropsOptions {
		refKey: string;
	}
	declare export type GetInputPropsOptions = {}
	declare export type GetLabelPropsOptions = {}
	declare export type getToggleButtonPropsOptions = {}
	declare type OptionalExtraGetItemPropsOptions = {
		[key: string]: any
	}
	declare export type GetItemPropsOptions<Item> = {
		index?: number,
		item: Item
	} & OptionalExtraGetItemPropsOptions
	declare export interface PropGetters<Item> {
		getRootProps: (options: GetRootPropsOptions) => any;
		getToggleButtonProps: (options?: getToggleButtonPropsOptions) => any;
		getLabelProps: (options?: GetLabelPropsOptions) => any;
		getMenuProps: (options?: {}) => any;
		getInputProps: (options?: GetInputPropsOptions) => any;
		getItemProps: (options: GetItemPropsOptions<Item>) => any;
	}
	declare export interface Actions<Item> {
		reset: (
			otherStateToSet?: $Shape<StateChangeOptions<Item>>,
			cb?: Callback
		) => void;
		openMenu: (cb?: Callback) => void;
		closeMenu: (cb?: Callback) => void;
		toggleMenu: (
			otherStateToSet?: $Shape<StateChangeOptions<Item>>,
			cb?: Callback
		) => void;
		selectItem: (
			item: Item,
			otherStateToSet?: $Shape<StateChangeOptions<Item>>,
			cb?: Callback
		) => void;
		selectItemAtIndex: (
			index: number,
			otherStateToSet?: $Shape<StateChangeOptions<Item>>,
			cb?: Callback
		) => void;
		selectHighlightedItem: (
			otherStateToSet?: $Shape<StateChangeOptions<Item>>,
			cb?: Callback
		) => void;
		setHighlightedIndex: (
			index: number,
			otherStateToSet?: $Shape<StateChangeOptions<Item>>,
			cb?: Callback
		) => void;
		clearSelection: (cb?: Callback) => void;
		clearItems: () => void;
		setItemCount: (count: number) => void;
		unsetItemCount: () => void;
		setState: (
			stateToSet: $Shape<StateChangeOptions<Item>> | StateChangeFunction<Item>,
			cb?: Callback
		) => void;
		itemToString: (item: Item) => string;
	}
	declare export type ControllerStateAndHelpers<Item> = DownshiftState<Item> &
		PropGetters<Item> &
		Actions<Item>
	declare export type ChildrenFunction<Item> = (
		options: ControllerStateAndHelpers<Item>
	) => React.ReactNode
	declare export type DownshiftInterface<Item> = React.ComponentClass<
		DownshiftProps<Item>
	> & {
		stateChangeTypes: StateChangeTypes
	}
	declare var Downshift: DownshiftInterface<any>
	declare module.exports: typeof Downshift
}
